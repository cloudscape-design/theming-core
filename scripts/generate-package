#!/usr/bin/env node
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

const path = require('path');
const fs = require('fs');
const { execSync } = require('child_process');

const root = path.join(__dirname, '..');
const original = path.join(root, 'package.json');
const originalLock = path.join(root, 'package-lock.json');
const originalContent = JSON.parse(fs.readFileSync(original).toString());
const originalLockContent = JSON.parse(fs.readFileSync(originalLock).toString());

const packages = [
  {
    manifest: {
      name: '@cloudscape-design/theming-build',
      main: './build/index.js',
      files: ['shared', 'build'],
    },
    packageRoot: path.join(root, './lib/node'),
    dependencies: [
      'autoprefixer',
      'glob',
      'loader-utils',
      'lodash',
      'postcss',
      'postcss-custom-properties',
      'postcss-discard-empty',
      'postcss-initial',
      'postcss-inline-svg',
      'postcss-modules',
      'sass',
      'string-hash',
      'tslib',
    ],
  },
  {
    manifest: {
      name: '@cloudscape-design/theming-runtime',
      main: './browser/index.js',
      files: ['shared', 'browser'],
    },
    packageRoot: path.join(root, './lib/browser'),
    dependencies: ['tslib'],
  },
];

packages.forEach((package) => {
  const { packageRoot, dependencies, manifest } = package;
  const { version } = originalContent;

  const pkg = {
    version,
    ...manifest,
    dependencies: pickDependenciesWithVersions(dependencies, originalContent.dependencies),
  };
  fs.writeFileSync(path.join(packageRoot, './package.json'), JSON.stringify(pkg, null, 2));
});

function pickDependenciesWithVersions(dependencies, options) {
  return dependencies.reduce((obj, dep) => {
    const version = options[dep];
    if (!version) {
      throw new Error(`Dependency ${dep} is not listed in package.json but required by package`);
    }
    obj[dep] = version;
    return obj;
  }, {});
}
